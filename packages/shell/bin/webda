#!/usr/bin/env node
"use strict";
var fs = require("fs");
var path = require("path");
var Module = require("module");

/**
 * Get Version of a package (version attribute of package.json)
 *
 * @param packageName to retrieve version from
 */
function getVersion(packageName) {
  return require(packageName + "/package.json").version;
}

let versions = {
  core: {
    path: "",
    version: "",
    type: ""
  },
  shell: {
    path: "",
    version: "",
    type: ""
  }
};

/**
 * Include Webda library
 *
 * Resolution order is:
 *  - local library
 *  - local folder
 *  - embedded library
 */
if (fs.existsSync("node_modules/@webda/core")) {
  // Local module of webda exists use it
  versions.core.path = process.cwd() + "/node_modules/@webda/core";
  versions.core.version = getVersion(versions.core.path);
  versions.core.type = "local";
} else if (fs.existsSync("core.js") && fs.existsSync("services/executor.js")) {
  versions.core.path = process.cwd();
  versions.core.version = "dev";
  versions.core.type = "development";
} else {
  let dir = process.cwd() + "/..";
  while (path.resolve(dir) !== "/") {
    if (fs.existsSync(path.join(dir, "node_modules/@webda/core"))) {
      versions.core.path = dir + "/node_modules/@webda/core";
      versions.core.version = getVersion(versions.core.path);
      versions.core.type = "local";
      break;
    }
    dir = path.join(dir, "..");
  }
  if (versions.core.type !== "local") {
    // Use the webda-shell default webda
    versions.core.path = "@webda/core";
    versions.core.version = getVersion(versions.core.path);
    versions.core.type = "embedded";
  }
}
global.__webda = require(versions.core.path);
global.__webda_shell = __dirname + "/..";
versions.shell.path = __dirname + "/..";
versions.shell.version = getVersion(__webda_shell);

/**
 * Search for webda.shell.json override or use standard
 */

// Capture require() to use local webda if exists
function intercept(__require) {
  return function (moduleId) {
    if (moduleId === "@webda/core" || moduleId === "webda") {
      return global.__webda;
    }
    return __require.apply(this, arguments);
  };
}
Module.prototype.require = intercept(Module.prototype.require);

var consoleService = require(global.__webda_shell + "/lib/console/webda").default;

/**
 * Commandline parsing
 */
let p = consoleService.handleCommand(process.argv.slice(2), versions);
if (p instanceof Promise || (p && p.then)) {
  p.then(res => {
    process.exit(res);
  }).catch(err => {
    consoleService.log("ERROR", err);
    process.exit(1);
  });
}
